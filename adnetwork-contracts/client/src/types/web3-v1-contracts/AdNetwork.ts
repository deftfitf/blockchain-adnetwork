/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdApproved = ContractEventLog<{
  adId: string;
  inventoryId: string;
  0: string;
  1: string;
}>;
export type AdCreated = ContractEventLog<{
  inventoryId: string;
  adId: string;
  0: string;
  1: string;
}>;
export type AdRejected = ContractEventLog<{
  adId: string;
  inventoryId: string;
  0: string;
  1: string;
}>;
export type AdReviewRequestSent = ContractEventLog<{
  inventoryId: string;
  requestHash: string;
  adHash: string;
  0: string;
  1: string;
  2: string;
}>;
export type InventoryCreated = ContractEventLog<{
  inventoryId: string;
  0: string;
}>;

export interface AdNetwork extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AdNetwork;
  clone(): AdNetwork;
  methods: {
    createAdInventory(
      name: string,
      uri: string,
      publicKey: string,
      floorPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    removeAdInventory(
      _inventoryId: number | string | BN
    ): NonPayableTransactionObject<void>;

    createAd(
      _inventoryId: number | string | BN,
      _hash: string | number[],
      _hashForDelivery: string | number[],
      _start: number | string | BN,
      _end: number | string | BN
    ): PayableTransactionObject<string>;

    approveAd(
      _inventoryId: number | string | BN,
      _adId: number | string | BN
    ): NonPayableTransactionObject<void>;

    rejectAd(
      _inventoryId: number | string | BN,
      _adId: number | string | BN
    ): NonPayableTransactionObject<void>;

    collectAd(
      _inventoryId: number | string | BN,
      _adId: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAdsOf(_inventoryId: number | string | BN): NonPayableTransactionObject<{
      adIds: string[];
      inventoryIds: string[];
      adHashes: string[];
      adHashForDeliveries: string[];
      starts: string[];
      ends: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
      5: string[];
    }>;

    getAdsByOwnerAddress(_ownerAddress: string): NonPayableTransactionObject<{
      adIds: string[];
      inventoryIds: string[];
      adHashes: string[];
      starts: string[];
      ends: string[];
      approved: boolean[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
      5: boolean[];
    }>;

    getAdsWaitingForApprovalOf(
      _inventoryId: number | string | BN
    ): NonPayableTransactionObject<{
      adIds: string[];
      inventoryIds: string[];
      adHashes: string[];
      starts: string[];
      ends: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
    }>;

    getInventory(
      _inventoryId: number | string | BN
    ): NonPayableTransactionObject<{
      inventoryId: string;
      owner: string;
      name: string;
      uri: string;
      publicKey: string;
      floorPrice: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    getInventories(
      offset: number | string | BN,
      limit: number | string | BN
    ): NonPayableTransactionObject<{
      inventoryIds: string[];
      owners: string[];
      names: string[];
      uris: string[];
      publicKeys: string[];
      floorPrices: string[];
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string[];
      5: string[];
    }>;

    getExpiredAdIds(
      _inventoryId: number | string | BN
    ): NonPayableTransactionObject<string[]>;
  };
  events: {
    AdApproved(cb?: Callback<AdApproved>): EventEmitter;
    AdApproved(options?: EventOptions, cb?: Callback<AdApproved>): EventEmitter;

    AdCreated(cb?: Callback<AdCreated>): EventEmitter;
    AdCreated(options?: EventOptions, cb?: Callback<AdCreated>): EventEmitter;

    AdRejected(cb?: Callback<AdRejected>): EventEmitter;
    AdRejected(options?: EventOptions, cb?: Callback<AdRejected>): EventEmitter;

    AdReviewRequestSent(cb?: Callback<AdReviewRequestSent>): EventEmitter;
    AdReviewRequestSent(
      options?: EventOptions,
      cb?: Callback<AdReviewRequestSent>
    ): EventEmitter;

    InventoryCreated(cb?: Callback<InventoryCreated>): EventEmitter;
    InventoryCreated(
      options?: EventOptions,
      cb?: Callback<InventoryCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdApproved", cb: Callback<AdApproved>): void;
  once(
    event: "AdApproved",
    options: EventOptions,
    cb: Callback<AdApproved>
  ): void;

  once(event: "AdCreated", cb: Callback<AdCreated>): void;
  once(
    event: "AdCreated",
    options: EventOptions,
    cb: Callback<AdCreated>
  ): void;

  once(event: "AdRejected", cb: Callback<AdRejected>): void;
  once(
    event: "AdRejected",
    options: EventOptions,
    cb: Callback<AdRejected>
  ): void;

  once(event: "AdReviewRequestSent", cb: Callback<AdReviewRequestSent>): void;
  once(
    event: "AdReviewRequestSent",
    options: EventOptions,
    cb: Callback<AdReviewRequestSent>
  ): void;

  once(event: "InventoryCreated", cb: Callback<InventoryCreated>): void;
  once(
    event: "InventoryCreated",
    options: EventOptions,
    cb: Callback<InventoryCreated>
  ): void;
}
